/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file WeickertKuhneEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/09/05
 *
 * @brief Implementation of inline methods defined in WeickertKuhneEvolver.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

#include "DGtal/images/DifferentialOperators.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TImage>
inline
DGtal::WeickertKuhneEvolver<TImage>
::WeickertKuhneEvolver( const Image& aAImage, const Image& aBImage, const Image& aGImage, 
			const double& aK, 
			const double& aGridStep)
  : myA( aAImage ), myB( aBImage ), myG( aGImage ), 
    myK( aK ), myH( aGridStep )
{
  ASSERT( myA.extent() == myB.extent() ); 
  ASSERT( myA.extent() == myG.extent() ); 
  ASSERT( myH >= 0 ); 
}


template <typename TImage>
inline
DGtal::WeickertKuhneEvolver<TImage>::~WeickertKuhneEvolver()
{
}


template <typename TImage>
inline
void
DGtal::WeickertKuhneEvolver<TImage>::update(Image& aF, const double& aT)
{
  ASSERT( aF.extent() == myB.extent() ); 
  ASSERT( aT >= 0 ); 

  //balloon term
  if (myK != 0)
    {
      trace.info() << "balloon term..." << std::endl; 
      GodunovGradient<Image> gradient(aF, (myK >= 0), myH);
      GradientModulus<GodunovGradient<Image> > m(gradient);

      {
	Domain d = aF.domain();  
	typename Domain::ConstIterator it = d.begin(); 
	typename Domain::ConstIterator itEnd = d.end();
	for ( ; it != itEnd; ++it)
	  aF.setValue(*it, (aF(*it) + ( aT*myK*myG(*it)*m(*it) ) ) ); 
      }
    }

  //diffusion term
  trace.info() << "diffusion term..." << std::endl; 
    
  // //AOS scheme
  // for (Dimension k = 0; k < dimension; ++k)
  //   { //for each dimension
  //     diffusion(aF,aT,k); 
  //   }
  // {  //normalization
  //   Domain d = aF.domain();  
  //   typename Domain::ConstIterator it = d.begin(); 
  //   typename Domain::ConstIterator itEnd = d.end();
  //   for ( ; it != itEnd; ++it)
  //     aF.setValue(*it, (aF(*it) / (double) dimension) ); 
  // }

  //AOS scheme
  std::vector<Image> l; 
  for (Dimension k = 0; k < dimension; ++k)
    { //for each dimension
      l.push_back( Image( aF.lowerBound(), aF.upperBound() ) ); 
      diffusion(aF, l[k], aT, k); 
    }
  {  //normalization
    Domain d = aF.domain();  
    typename Domain::ConstIterator it = d.begin(); 
    typename Domain::ConstIterator itEnd = d.end();
    for ( ; it != itEnd; ++it)
      {
	Value v = 0; 
	for (Dimension k = 0; k < dimension; ++k)
	  v += (l[k](*it) / (double) dimension); 
	aF.setValue(*it, v ); 
      }
  }

}


template <typename TImage>
inline
void
DGtal::WeickertKuhneEvolver<TImage>
::diffusion(Image& aF, Image& aOutputF, const double& aT, const Dimension& aDim)
{

  ASSERT( aT >= 0 ); 
  ASSERT( (aDim>=0) && (aDim<dimension) ); 

  double k = 2*aT/(myH*myH); 

  //values vector
  Values alpha;
  Values beta;
  Values gamma;
  Values data;

  //ranges
  std::vector<Dimension> vDims(dimension); 
  for (Dimension k = 0; k < aDim; ++k)
    vDims.at(k) = ( k + (dimension - aDim) ); 
  for (Dimension k = aDim; k < dimension; ++k)
    vDims.at(k) = (k - aDim);
  Domain d = aF.domain();  
  typename Domain::ConstSubRange range = d.subRange(vDims);
  
  typename Domain::ConstSubRange::ConstIterator itb = range.begin(); 
  typename Domain::ConstSubRange::ConstIterator ite = range.end(); 
  ASSERT(itb != ite);
  typename Domain::ConstSubRange::ConstIterator it( itb ); 
  typename Domain::ConstSubRange::ConstIterator prevIt( it ); 
  typename Domain::ConstSubRange::ConstIterator nextIt( it ); ++nextIt; 
  ASSERT(nextIt != ite);   

  //operator
  GradientModulus<Gradient<CentralDifference<Image> > > mod(aF,myH); 

  //fill values vectors
  alpha.push_back( 1 + k * myA(*it) * mod(*it) * 2 
		   * velocity( myB(*it), mod(*it), myB(*nextIt), mod(*nextIt) ) );  
  beta.push_back( -k * myA(*it) * mod(*it) 
		  * velocity( myB(*it), mod(*it), myB(*nextIt), mod(*nextIt) ) );  
  data.push_back(aF(*it)); 
  
  for (++it, ++nextIt ; nextIt != ite; ++prevIt, ++it, ++nextIt )
    {
      alpha.push_back( 1 + k * myA(*it) * mod(*it) 
		       * ( velocity( myB(*it), mod(*it), myB(*nextIt), mod(*nextIt) )  
			   + velocity( myB(*it), mod(*it), myB(*prevIt), mod(*prevIt) ) ) );  
      beta.push_back( -k * myA(*it) * mod(*it) * 
		      ( velocity( myB(*it), mod(*it), myB(*nextIt), mod(*nextIt) ) ) ); 
      gamma.push_back( -k * myA(*it) * mod(*it) * 
		       ( velocity( myB(*it), mod(*it), myB(*prevIt), mod(*prevIt) ) ) ); 
      data.push_back(aF(*it)); 
    }
  alpha.push_back( 1 + k * myA(*it) * mod(*it) * 2  
		   * ( velocity( myB(*it), mod(*it), myB(*prevIt), mod(*prevIt) ) ) );  
  gamma.push_back( -k * myA(*it) * mod(*it) 
		   * ( velocity( myB(*it), mod(*it), myB(*prevIt), mod(*prevIt) ) ) ); 
  data.push_back(aF(*it)); 
  
  //Linear system resolution by Thomas algorithm
  //trace.info() << "Thomas algorithm..." << std::endl; 
  thomasAlgorithm(data, alpha, beta, gamma, data); 

  //put returned data into aOutputF
  ASSERT(data.size() == aOutputF.size());
  typename Values::iterator i = data.begin(); 
  it = itb; 
  for ( ; it != ite; ++it, ++i)
    aOutputF.setValue(*it, *i); 

}


template <typename TImage>
inline
void
DGtal::WeickertKuhneEvolver<TImage>::thomasAlgorithm(Values& aU, 
						     Values& aAlpha, Values& aBeta, Values& aGamma, const Values& aD)
{

  unsigned int n = aD.size(); 
  ASSERT(n > 0); 
  ASSERT(aAlpha.size()==n); 
  ASSERT(aBeta.size()==(n-1)); 
  ASSERT(aGamma.size()==(n-1)); 
  
  Values m, l, y;

  //LR decomposition such that B=LR
  //m is the main diagonal of R, 
  //l is the lower diagonal of L
  m.push_back( aAlpha.at(0) );
  for (unsigned int i = 0; i < n-1; ++i)
    {
      l.push_back( aGamma.at(i) / m.at(i) ); 
      m.push_back( aAlpha.at(i+1) - l.at(i)*aBeta.at(i) ); 
    }
  ASSERT(m.size()==n); 
  ASSERT(l.size()==(n-1)); 
  //forward substitution
  //compute y such that Ly=d
  y.push_back( aD.at(0) );
  for (unsigned int i = 1; i < n; ++i)
    {
      y.push_back( aD.at(i) - l.at(i-1)*y.at(i-1) ); 
    }
  ASSERT(y.size()==n); 
  //backward substitution
  //compute u such that Ru=y
  aU.at(n-1) = y.at(n-1)/m.at(n-1); 
  for (int i = n-2; i >= 0; --i)
    {
      aU.at(i) = ( y.at(i) - aBeta.at(i)*aU.at(i+1) ) / m.at(i);
    }
  ASSERT(aU.size()==n); 
}


template <typename TImage>
inline
typename DGtal::WeickertKuhneEvolver<TImage>::Value
DGtal::WeickertKuhneEvolver<TImage>::velocity(const Value& bi, const Value& gi, const Value& bj, const Value& gj)
{
  ASSERT(bi != 0);
  ASSERT(bj != 0);
  Value qi = gi / bi;
  Value qj = gj / bj; 
  Value som = qi + qj; 
  if (som == 0) return 0; 
  else return 2/som;   
}

template <typename TImage>
inline
void
DGtal::WeickertKuhneEvolver<TImage>::selfDisplay ( std::ostream & out ) const
{
  out << "[WeickertKuhneEvolver]\n";
  out << "\n";
}

template <typename TImage>
inline
bool
DGtal::WeickertKuhneEvolver<TImage>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TImage>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const WeickertKuhneEvolver<TImage> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


