/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ExplicitReactionEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/01/09
 *
 * @brief Implementation of inline methods defined in ExplicitReactionEvolver.h
 *
 * This file is part of the DGtal library.
 */



//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TImage>
inline
DGtal::ExplicitReactionEvolver<TImage>
::ExplicitReactionEvolver(const double& anEpsilon)
: myEpsilon(anEpsilon)
{ 
}


template <typename TImage>
inline
DGtal::ExplicitReactionEvolver<TImage>::~ExplicitReactionEvolver()
{
}


template <typename TImage>
inline
void
DGtal::ExplicitReactionEvolver<TImage>::update(Image& aF, const double& aT)
{
  ASSERT(aT >= 0); 

	Domain d = aF.domain();  
	typename Domain::ConstIterator it = d.begin(); 
	typename Domain::ConstIterator itEnd = d.end();
	for ( ; it != itEnd; ++it)
  {
    double v = static_cast<double>( aF(*it) );
    Value newValue = v - ( aT / (myEpsilon * myEpsilon ) ) * derivative ( v );  
    aF.setValue( *it, static_cast<Value>(newValue) ); 
  }

}


template <typename TImage>
inline
void
DGtal::ExplicitReactionEvolver<TImage>::selfDisplay ( std::ostream & out ) const
{
  out << "[ExplicitReactionEvolver]\n";
  out << "\n";
}

template <typename TImage>
inline
bool
DGtal::ExplicitReactionEvolver<TImage>::isValid() const
{
    return true;
}

template <typename TImage>
inline
double
DGtal::ExplicitReactionEvolver<TImage>::derivative(const double& aV) const
{
    return aV*(1-aV)*(1-2*aV);
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TImage>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const ExplicitReactionEvolver<TImage> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


