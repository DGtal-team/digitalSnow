/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FrontierEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/03/01
 *
 * @brief Implementation of inline methods defined in FrontierEvolver.h
 *
 * This file is part of the DGtal library.
 */



//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate>
::FrontierEvolver(const KSpace& aK, Image& aI, Surfel& aS, 
 const Functor& aF, const Predicate& aP, const double& aW)
  : myKSpace( aK ), myImage( aI ), mySurfel( aS ), myFunctor( aF ), myPointPred( aP ), myW( aW ),
    mySurfelPred( myKSpace, myImage, 
		  myImage( myKSpace.sCoords( 
  myKSpace.sIndirectIncident( mySurfel, *myKSpace.sOrthDirs( mySurfel ) ) ) ),
		  myImage( myKSpace.sCoords(
  myKSpace.sDirectIncident( mySurfel, *myKSpace.sOrthDirs( mySurfel ) ) ) ) ), 
    myFrontier( myKSpace, mySurfelPred, 
		SurfelAdjacency<KSpace::dimension>( true ), 
                mySurfel )
{ 
  ASSERT( myW > 0 );   ASSERT( myW <= 1.0 ); 
  //to do internal function so that initialization is more readable
}

template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate>::~FrontierEvolver()
{
}


template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate>::update()
{
/*
  init(); 
  order(); 
  evolve(); 
*/
  return false; 
}


template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
void
DGtal::FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate>::selfDisplay ( std::ostream & out ) const
{
  out << "[FrontierEvolver]\n";
  out << "\n";
}

template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TImage, typename TFunctor, typename TPredicate>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const FrontierEvolver<TKSpace, TImage, TFunctor, TPredicate> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


