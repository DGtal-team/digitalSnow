/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FrontierEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/03/01
 *
 * @brief Implementation of inline methods defined in FrontierEvolver.h
 *
 * This file is part of the DGtal library.
 */



//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::FrontierEvolver(const KSpace& aK, LImage& aI, DImage& aD, Surfel& aS, 
 const Functor& aF, const Predicate& aP, const double& aW)
  : myKSpace( aK ), myLImage( aI ), myDImage( aD ), mySurfel( aS ), 
    myFunctor( aF ), myPointPred( aP ), myW( aW ),
    myInnerLabel( myLImage( getInnerPoint( mySurfel ) ) ), 
    myOuterLabel( myLImage( getOuterPoint( mySurfel ) ) ), 
    mySurfelPred( myKSpace, myLImage, myInnerLabel, myOuterLabel ), 
    myFrontier( myKSpace, mySurfelPred, 
		SurfelAdjacency<KSpace::dimension>( true ), 
                mySurfel )
{ 
  ASSERT( myW > 0 );   
  ASSERT( myW <= 1.0 ); 
  ASSERT( myKSpace.sIsSurfel( mySurfel ) );
  ASSERT( myInnerLabel != myOuterLabel ); 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::~FrontierEvolver()
{
}


template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::update()
{

  /// set of points that are candidate to the flip
  std::vector<Point> points; 
  init ( std::back_inserter( points ) ); 
  trace.info() << points.size() << " closest points" << std::endl; 

  /// velocity computation
  typedef std::pair<Point,Velocity> PointVelocity; 
  std::vector<PointVelocity> candidates; 
  for (typename std::vector<Point>::const_iterator 
	 it = points.begin(), 
	 itEnd = points.end(); 
       it != itEnd; ++it)
    {
      Velocity v = myFunctor( *it ); 
      //TODO velocity max computation here! and store zero-crossing time instead
      candidates.push_back( PointVelocity( *it, v ) ); 
    }
  trace.info() << candidates.size() << " candidates " << std::endl; 

  /// time threshold computation
  details::VelocityCompare velocityCompare;  
  typename std::vector<PointVelocity>::iterator 
    itmax = std::max_element( candidates.begin(), candidates.end(), velocityCompare );
  Velocity vmax = itmax->second;  
  double tmax = myW / std::abs(vmax); 
  trace.info() << "Distance max: " << myW << " / " 
	       << "Velocity max: " << vmax << " = " 
	       << "Time threshold: " << tmax << std::endl; 

  /// ordering of the points according 
  /// to their zero-crossing time
  details::ZeroCrossingTimeCompare<DImage> timeCompare( myDImage ); 
  std::sort( candidates.begin(), candidates.end(), timeCompare ); 
  trace.info() << "Times ranging from " 
	       << ( std::abs(myDImage( candidates.begin()->first ))
		    / std::abs(candidates.begin()->second) ) 
	       << " to " 
	       << ( std::abs(myDImage( candidates.rbegin()->first ))
		    / std::abs(candidates.begin()->second) ) 
	       << std::endl; 

  /// flip points one by one, in order,
  /// while possible
  ASSERT (candidates.begin() != candidates.end()); 
  Point p; 
  double t; 
  bool flag = true; 
  for (typename std::vector<PointVelocity>::const_iterator 
	 it = candidates.begin(), 
	 itEnd = candidates.end(); 
       ( (it != itEnd)&&(flag) ); ++it)
    {
      p = it->first;
      t = ( std::abs(myDImage(p)) / std::abs(it->second) ); 
      if ( (t <= tmax) && ( myPointPred( p ) ) )
	{
	  /// flip( p );
	  if ( myLImage(p) == myInnerLabel )
	    myLImage.setValue( p, myOuterLabel ); 
	  else if ( myLImage(p) == myOuterLabel )
	    myLImage.setValue( p, myInnerLabel ); 
	  else 
	    ASSERT( false && "impossible case" ); 
	}
      else 
	flag = false; 
    }

  trace.info() << "Lastest flipped point: " << p << std::endl; 
  //updateSurfel( p ); 
  trace.info() << "new bel: " << mySurfel << std::endl; 

  return false; 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
template <typename TOutputIterator>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::init( const TOutputIterator& out )
{

  TOutputIterator res = out; 

  /// set of points for which the distance value 
  /// is computed and stored in myDImage
  ///////////////////////get the set type from a traits selector 
  typedef DigitalSetFromMap<DImage> PointSet; 
  PointSet points(myDImage);


  /// initialization of points from the 
  /// points adjacent to the frontier
  unsigned int nbsurfels = 0;
  for ( SurfelIterator it = myFrontier.begin(), 
	  itEnd = myFrontier.end();
        it != itEnd; ++it )
    {
      Point in( getInnerPoint( *it ) ); 
      Point out( getOuterPoint( *it ) );
 
      insertAndAlwaysSetValue( myDImage, points, in, -0.5 );
      insertAndAlwaysSetValue( myDImage, points, out, 0.5 );

      ++nbsurfels;
    }
  trace.info() << nbsurfels << " surfels found." << std::endl;  
  trace.info() << points << std::endl;  

  std::copy( points.begin(), points.end(), res ); 

  /// FMM 
  Point p; 
  Distance d; 
  
  //definition
  typedef FMM<DImage, PointSet, typename Domain::Predicate > FMM;
  Domain domain = myLImage.domain(); // computation domain
  FMM fmm( myDImage, points, domain.predicate() );

  //first pass
  {
    double threshold = myW + 1.0;  // distance threshold
    fmm.computeOneStep( p, d );
    while (std::abs(d) < threshold)
      {
	*res++ = p; 
	fmm.computeOneStep( p, d );
      } 
  }
  trace.info() << fmm << std::endl; 

  //second pass
  {
    double threshold = myW + 2.0;  // distance threshold
    while (std::abs(d) < threshold)
      {
	fmm.computeOneStep( p, d );
      } 
  }
  trace.info() << fmm << std::endl; 

}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
typename TFunctor, typename TPredicate>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::selfDisplay ( std::ostream & out ) const
{
  out << "[FrontierEvolver]\n";
  out << "\n";
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::isValid() const
{
    return true;
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
typename DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
				TFunctor, TPredicate>::Point
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::getInnerPoint(const Surfel& s) const
{
  return myKSpace.sCoords( myKSpace.sDirectIncident( s, *myKSpace.sOrthDirs( s ) ) );
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
typename DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
				TFunctor, TPredicate>::Point
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::getOuterPoint(const Surfel& s) const
{
  return myKSpace.sCoords( myKSpace.sIndirectIncident( s, *myKSpace.sOrthDirs( s ) ) ); 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::updateSurfel(const Point& p)
{
  typename KSpace::SCell spel, surfel; 
  myKSpace.sSetCoords( spel, p ); 

  /// for each direction 
  bool flag = false; 
  for ( typename KSpace::DirIterator q = myKSpace.sDirs( spel ); 
	( (q != 0)&&(!flag) ); ++q ) 
    { 
      DGtal::Dimension dir = *q;

      /// for the direct orientation
      surfel = myKSpace.sDirectIncident( spel, dir );
      ASSERT( myKSpace.sIsSurfel( surfel ) ); 
      if ( ( myLImage(getInnerPoint( surfel )) == myInnerLabel ) 
	   && ( myLImage(getOuterPoint( surfel )) == myOuterLabel ) )
	{
	  mySurfel = surfel; 
	  flag = true; 
	}
      if (!flag)
	{
	  /// for the indirect orientation
	  surfel = myKSpace.sIndirectIncident( spel, dir ); 
	  ASSERT( myKSpace.sIsSurfel( surfel ) ); 
	  if ( ( myLImage(getInnerPoint( surfel )) == myInnerLabel ) 
	       && ( myLImage(getOuterPoint( surfel )) == myOuterLabel ) )
	    {
	      mySurfel = surfel; 
	      flag = true; 
	    }
	}
    } 

  ASSERT( flag && "impossible case" ); 
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
		    TFunctor, TPredicate> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


