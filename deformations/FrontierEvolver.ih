/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FrontierEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/03/01
 *
 * @brief Implementation of inline methods defined in FrontierEvolver.h
 *
 * This file is part of the DGtal library.
 */



//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::FrontierEvolver(const KSpace& aK, LImage& aI, DImage& aD, Surfel& aS, 
 const Functor& aF, const Predicate& aP, const double& aW)
  : myKSpace( aK ), myLImage( aI ), myDImage( aD ), mySurfel( aS ), 
    myFunctor( aF ), myPointPred( aP ), myW( aW ),
    myInnerLabel( myLImage( getInnerPoint( mySurfel ) ) ), 
    myOuterLabel( myLImage( getOuterPoint( mySurfel ) ) ), 
    mySurfelPred( myKSpace, myLImage, myInnerLabel, myOuterLabel ), 
    myFrontier( new Frontier ( myKSpace, mySurfelPred, 
			       SurfelAdjacency<KSpace::dimension>( true ), 
			       mySurfel ) )
{ 
  ASSERT( myW > 0 );   
  ASSERT( myW <= 1.0 ); 
  ASSERT( myKSpace.sIsSurfel( mySurfel ) );
  trace.info() << "Labels: " << myInnerLabel << " and " << myOuterLabel << std::endl;  
  ASSERT( myInnerLabel != myOuterLabel ); 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::~FrontierEvolver()
{
  delete( myFrontier ); 
}


template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::update()
{

  /// set of points that are candidate to the flip
  std::vector<Point> points; 
  init ( std::back_inserter( points ) ); 
  trace.info() << points.size() << " closest points" << std::endl; 

  /// velocity and zero-crossing time computation
  typedef std::pair<Point,double> PointTime; 
  std::vector<PointTime> candidates; 
  double vmax = 0; 
  for (typename std::vector<Point>::const_iterator 
	 it = points.begin(), 
	 itEnd = points.end(); 
       it != itEnd; ++it)
    {
      // velocity
      Velocity v = myFunctor( *it );
      // maximal velocity
      double vabs = std::abs( static_cast<double>( v ) ); 
      if (vabs > vmax) vmax = vabs; 
      // new candidate with its zero-crossing time
      double d = myDImage( *it );
      if ( ( (d>=0) && (v<0) ) 
	   || ( (d<=0) && (v>0) ) )
	{ //if opposite signs (and v != 0)
	  double t = - d / v;
	  ASSERT( t >= 0 ); 
	  candidates.push_back( PointTime( *it, t ) ); 
	}
    }
  trace.info() << candidates.size() << " candidates " << std::endl; 

  /// time threshold computation
  double tmax = myW / vmax; 
  trace.info() << "Distance max: " << myW << " / " 
	       << "Velocity max: " << vmax << " = " 
	       << "Time threshold: " << tmax << std::endl; 

  if (candidates.begin() != candidates.end())
    { //if they are candidates

      /// ordering of the points according 
      /// to their zero-crossing time
      trace.info() << "ordering..." << std::endl; 
      details::CompareSecondElement timeCompare; 
      std::sort( candidates.begin(), candidates.end(), timeCompare ); 
      trace.info() << "Times ranging from " 
		   << candidates.begin()->second 
		   << " to " 
		   << candidates.rbegin()->second 
		   << std::endl; 

      /// flip points one by one, in order,
      /// while possible
      unsigned int nbFlips = 0; 
      bool go = true;
      //      bool isInner = true; 
      for (typename std::vector<PointTime>::const_iterator 
	     it = candidates.begin(), 
	     itEnd = candidates.end(); 
	   ( (it != itEnd)&&(go) ); ++it)
	{
	  const Point p = it->first;
	  const double t = it->second; 
	  if ( (t <= tmax) && ( myPointPred( p ) ) )
	    { /// flip
	      nbFlips++; 
	      if ( myLImage(p) == myInnerLabel )
		{
		  //		  isInner = false; 
		  myLImage.setValue( p, myOuterLabel );
		}
	      else if ( myLImage(p) == myOuterLabel )
		{
		  //		  isInner = true; 
		  myLImage.setValue( p, myInnerLabel ); 
		}
	      else 
		ASSERT( false && "impossible label in update method" ); 
	    }
	  else 
	    go = false; 
	}
      trace.info() << nbFlips << " flipped points" << std::endl; 

      /// update digital frontier
      // moving mySurfel in one direction 
      // (but along 2 orientations) until
      // it is a contact surfel
      DGtal::Dimension q = *myKSpace.sOrthDirs( mySurfel ); 
      Surfel sIncr = mySurfel; 
      Surfel sDecr = mySurfel;
      bool isIncr = true; 
      bool stop = mySurfelPred( mySurfel ); 
      while ( !stop )
	{
	  if (isIncr)
	    {
	      ASSERT( !myKSpace.sIsMax( sIncr, q) ); 
	      sIncr = myKSpace.sGetIncr( sIncr, q );   
	      stop = mySurfelPred( sIncr ); 
	      isIncr = false; 
	    }
	  else 
	    {
	      ASSERT( !myKSpace.sIsMin( sDecr, q) ); 
	      sDecr = myKSpace.sGetDecr( sDecr, q );   
	      stop = mySurfelPred( sDecr ); 
	      isIncr = true; 
	    }
	}
      if (isIncr)
	mySurfel = sDecr; 
      else 
	mySurfel = sIncr; 
      trace.info() << "new bel: " << mySurfel << std::endl; 

      /// update frontier
      delete ( myFrontier ); 
      myFrontier = new Frontier ( myKSpace, mySurfelPred, 
				  SurfelAdjacency<KSpace::dimension>( true ), 
				  mySurfel ); 

      return true; 
    }
  else 
    return false; 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
template <typename TOutputIterator>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::init( const TOutputIterator& out )
{

  TOutputIterator res = out; 

  /// set of points for which the distance value 
  /// is computed and stored in myDImage
  ///////////////////////get the set type from a traits selector 
  typedef DigitalSetFromMap<DImage> PointSet; 
  PointSet points(myDImage);
  points.clear(); 

  /// initialization of points from the 
  /// points adjacent to the frontier
  trace.info() << "starting surfel: " << mySurfel << std::endl;  
  unsigned int nbsurfels = 0;
  for ( SurfelIterator it = myFrontier->begin(), 
	  itEnd = myFrontier->end();
        it != itEnd; ++it )
    {
      Point in( getInnerPoint( *it ) ); 
      Point out( getOuterPoint( *it ) );

      if ( myDImage.domain().isInside( in ) ) //TODO using predicate on labels
	insertAndAlwaysSetValue( myDImage, points, in, -0.5 );
      if ( myDImage.domain().isInside( out ) )
	insertAndAlwaysSetValue( myDImage, points, out, 0.5 );

      ++nbsurfels;
    }
  trace.info() << nbsurfels << " surfels found." << std::endl;  
  trace.info() << points << std::endl;  

  std::copy( points.begin(), points.end(), res ); 

  /// FMM 
  
  //definition
  typedef FMM<DImage, PointSet, typename DImage::Domain::Predicate > FMM;
  trace.info() << myDImage.domain() << std::endl; 
  //TODO restreindre a deux labels
  FMM fmm( myDImage, points, myDImage.domain().predicate() );

  Point p = Point::diagonal(0);      //last point
  Distance d = 0;                  //its distance
  //first pass
  {
    double threshold = myW + 1.5;  // distance threshold
    while ( (fmm.computeOneStep( p, d )) 
	    && (std::abs(d) < threshold) )
      {
	if ( !myDImage.domain().isInside( p ) ) 
	  {
	    std::cerr << p << " not in domain (from FMM)" << std::endl; 
	    throw DGtal::InputException(); 
	  }
	*res++ = p; 
      }
  }
  trace.info() << fmm << std::endl; 

  //second pass
  {
    double threshold = myW + 2.5;  // distance threshold
    while ( (fmm.computeOneStep( p, d )) 
	    && (std::abs(d) < threshold) )
      { }
  }
  trace.info() << fmm << std::endl; 

}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
typename TFunctor, typename TPredicate>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::selfDisplay ( std::ostream & out ) const
{
  out << "[FrontierEvolver]\n";
  out << "\n";
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
bool
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::isValid() const
{
    return true;
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
typename DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
				TFunctor, TPredicate>::Point
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::getInnerPoint(const Surfel& s) const
{
  return myKSpace.sCoords( myKSpace.sDirectIncident( s, *myKSpace.sOrthDirs( s ) ) );
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
typename DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
				TFunctor, TPredicate>::Point
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::getOuterPoint(const Surfel& s) const
{
  return myKSpace.sCoords( myKSpace.sIndirectIncident( s, *myKSpace.sOrthDirs( s ) ) ); 
}

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
void
DGtal::FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, TFunctor, TPredicate>
::updateFrontier(const Point& p, bool isPos)
{
  /// update mySurfel
  //neigbors
  Point neighbor = p; 
  for (Dimension k = 0; k < Point::dimension; ++k)
    {
      typename Point::Coordinate c = neighbor.at(k); 
      neighbor.at(k) = (c+1); 
      std::cout << neighbor << myLImage(neighbor) << " "; 
      neighbor.at(k) = (c-1); 
      std::cout << neighbor << myLImage(neighbor) << " "; 
      neighbor.at(k) = c; 
    }
  std::cout << std::endl; 


  /// spel creation
  typename KSpace::SCell spel; 
  if ( isPos )
    spel = myKSpace.sSpel( p, KSpace::POS ); 
  else
    spel = myKSpace.sSpel( p, KSpace::NEG ); 

  /// for each direction 
  bool flag = false; 
  for ( typename KSpace::DirIterator q = myKSpace.sDirs( spel ); 
  	( (q != 0)&&(!flag) ); ++q ) 
    { 
      DGtal::Dimension dir = *q;

      /// for the direct orientation
      typename KSpace::SCell surfel 
  	= myKSpace.sDirectIncident( spel, dir );
      ASSERT( myKSpace.sIsSurfel( surfel ) ); 
      if ( mySurfelPred( surfel ) )
  	{
  	  mySurfel = surfel; 
  	  flag = true; 
  	}
      if (!flag)
  	{
  	  /// for the indirect orientation
  	  surfel = myKSpace.sIndirectIncident( spel, dir ); 
  	  ASSERT( myKSpace.sIsSurfel( surfel ) ); 
  	  if ( mySurfelPred( surfel ) )
  	    {
  	      mySurfel = surfel; 
  	      flag = true; 
  	    }
  	}
    } 

  ASSERT( flag && "last flipped point must be a border point in updateSurfel method" ); 

  /// update frontier
  delete ( myFrontier ); 
  myFrontier = new Frontier ( myKSpace, mySurfelPred, 
			      SurfelAdjacency<KSpace::dimension>( true ), 
			      mySurfel ); 

}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TLabelImage, typename TDistanceImage, 
	  typename TFunctor, typename TPredicate>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const FrontierEvolver<TKSpace, TLabelImage, TDistanceImage, 
		    TFunctor, TPredicate> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


