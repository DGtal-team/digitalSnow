/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file LocalBalloonForce.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 * @date 2012/02/02
 *
 * Implementation of inline methods defined in LocalBalloonForce.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

#include "DGtal/images/DifferentialOperators.h"

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////
template <typename TFunction, typename TExternField>
inline
DGtal::LocalBalloonForce<TFunction, TExternField>
::LocalBalloonForce(PointFunctor& aF1, const ExternField& aF2, const double& aK)
 : myFuncPtr( &aF1 ), myFieldPtr( &aF2 ), myK( aK )
{ 
}

template <typename TFunction, typename TExternField>
template <typename TInputPoint>
inline
double
DGtal::LocalBalloonForce<TFunction, TExternField>
::operator()( const TInputPoint& aPoint ) const
{
  ASSERT( myFuncPtr );
  PointFunctor* tmpPtr = const_cast<PointFunctor*>(myFuncPtr); 
//ugly until differential operators are updated 
  GodunovGradient<PointFunctor> gradient( *tmpPtr, (myK >= 0) );
  GradientModulus<GodunovGradient<PointFunctor> > m(gradient);
  double res = myK * static_cast<double>( myFieldPtr->operator()(aPoint) )
                   * static_cast<double>( m(aPoint) ); 
  return res; 
}
//------------------------------------------------------------------------------


//                                                                           //
///////////////////////////////////////////////////////////////////////////////


